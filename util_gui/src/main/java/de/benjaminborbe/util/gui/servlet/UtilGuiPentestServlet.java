package de.benjaminborbe.util.gui.servlet;

import java.io.IOException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;

import com.google.inject.Inject;
import com.google.inject.Provider;
import com.google.inject.Singleton;

import de.benjaminborbe.authentication.api.AuthenticationService;
import de.benjaminborbe.authorization.api.PermissionDeniedException;
import de.benjaminborbe.html.api.HttpContext;
import de.benjaminborbe.html.api.Widget;
import de.benjaminborbe.navigation.api.NavigationWidget;
import de.benjaminborbe.tools.date.CalendarUtil;
import de.benjaminborbe.tools.date.TimeZoneUtil;
import de.benjaminborbe.tools.html.Target;
import de.benjaminborbe.tools.url.UrlUtil;
import de.benjaminborbe.tools.util.ParseUtil;
import de.benjaminborbe.website.form.FormInputSubmitWidget;
import de.benjaminborbe.website.form.FormInputTextWidget;
import de.benjaminborbe.website.form.FormWidget;
import de.benjaminborbe.website.link.LinkWidget;
import de.benjaminborbe.website.servlet.RedirectException;
import de.benjaminborbe.website.servlet.RedirectUtil;
import de.benjaminborbe.website.servlet.WebsiteHtmlServlet;
import de.benjaminborbe.website.util.H1Widget;
import de.benjaminborbe.website.util.ListWidget;

@Singleton
public class UtilGuiPentestServlet extends WebsiteHtmlServlet {

	private static final long serialVersionUID = 3897185107545429460L;

	private static final String TITLE = "Util - PenTest";

	private static final String PARAMETER_URL = "url";

	private static final String PARAMETER_PARAMETER_IGNORE = "ignore";

	private final Logger logger;

	private final UrlUtil urlUtil;

	@Inject
	public UtilGuiPentestServlet(
			final Logger logger,
			final CalendarUtil calendarUtil,
			final TimeZoneUtil timeZoneUtil,
			final ParseUtil parseUtil,
			final AuthenticationService authenticationService,
			final NavigationWidget navigationWidget,
			final Provider<HttpContext> httpContextProvider,
			final RedirectUtil redirectUtil,
			final UrlUtil urlUtil) {
		super(logger, calendarUtil, timeZoneUtil, parseUtil, navigationWidget, authenticationService, httpContextProvider, urlUtil);
		this.logger = logger;
		this.urlUtil = urlUtil;
	}

	@Override
	protected String getTitle() {
		return TITLE;
	}

	@Override
	protected Widget createContentWidget(final HttpServletRequest request, final HttpServletResponse response, final HttpContext context) throws IOException,
			PermissionDeniedException, RedirectException {
		logger.trace("printContent");
		final ListWidget widgets = new ListWidget();
		widgets.add(new H1Widget(getTitle()));

		final Set<String> parameterIgnore = buildIgnoreSet(request.getParameter(PARAMETER_PARAMETER_IGNORE));

		final String url = request.getParameter(PARAMETER_URL);
		if (url != null && url.length() > 0) {
			{
				final String penUrl = genPenUrlV1(url, parameterIgnore);
				widgets.add(new LinkWidget(new URL(penUrl), penUrl).addTarget(Target.BLANK));
			}
		}

		final FormWidget form = new FormWidget();
		form.addFormInputWidget(new FormInputTextWidget(PARAMETER_URL).addLabel("Url").addPlaceholder("url ..."));
		form.addFormInputWidget(new FormInputTextWidget(PARAMETER_PARAMETER_IGNORE).addLabel("Ignore").addPlaceholder("parameter ignore ..."));
		form.addFormInputWidget(new FormInputSubmitWidget("gen"));
		widgets.add(form);
		return widgets;
	}

	private Set<String> buildIgnoreSet(final String parameter) {
		final Set<String> result = new HashSet<String>();
		if (parameter != null) {
			final String[] parts = parameter.split(" ");
			for (final String part : parts) {
				result.add(part.trim());
			}
		}
		return result;
	}

	private String genPenUrlV1(final String url, final Set<String> parameterIgnore) throws UnsupportedEncodingException {
		final String[] parts = url.split("\\?", 2);
		if (parts.length == 2) {
			final StringWriter result = new StringWriter();
			result.append(parts[0]);
			result.append("?");
			final String[] parameterParst = parts[1].split("&");
			boolean first = true;
			for (final String part : parameterParst) {
				if (first) {
					first = false;
				}
				else {
					result.append("&");
				}
				final String[] keyValue = part.split("=", 2);
				result.append(keyValue[0]);
				result.append("=");
				if (parameterIgnore.contains(keyValue[0])) {
					result.append(keyValue[1]);
				}
				else {
					result.append(urlUtil.encode("\"></script><script>alert('XSS+" + keyValue[0] + "');</script><br class=\"bla"));
				}
			}
			return result.toString();
		}
		else {
			return parts[0];
		}
	}
}
